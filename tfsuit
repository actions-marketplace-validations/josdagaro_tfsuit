#!/bin/bash

set -eu

tfsuit() {
  (
    
die() {
  echo "$1"
  exit "${2:-0}"
}

convert_array_to_json_array() {
  local array
  local json_array
  array=($1)
  json_array="["

  for elem in "${array[@]}"; do
    if [ "$elem" != "variable" ]; then
      json_array="$json_array\"$elem\","
    fi
  done

  if [ "$json_array" != "[" ]; then
    json_array="${json_array::${#json_array}-1}"
  fi

  json_array+="]"
  echo "$json_array"
}

find_tf_files() {
  local dir
  local command_find
  local result
  dir="$1"
  command_find="#!/usr/bin/env bash
  find ${dir} "

  if [ -f ".tfsuitignore" ]; then
    command_find+="-type d \( "

    while read -r ignored; do
      command_find+=" -name ${ignored} -o"
    done < <(cat .tfsuitignore)

    command_find="${command_find::${#command_find}-2}\) -prune -false -o "
  fi

  command_find+="-name *.tf"
  echo "$command_find" >/tmp/tfsuit_find.sh
  result=$(bash /tmp/tfsuit_find.sh)
  rm -f /tmp/tfsuit_find.sh
  echo "$result"
}
    
show_usage() {
  die "usage: 
  "
}
    
# Initialize variables
help=0
debug=0
verbose=0
version=0
fail_on_not_compliant=0
dir=
config_json_path=

for arg in "$@"; do
  case $arg in
  -h | --help)
    help=1
    ;;
  -D | --debug)
    debug=1
    ;;
  -V | --verbose)
    verbose=1
    ;;
  -v | --version)
    version=1
    ;;
  -d=* | --dir=*)
    dir="${arg#*=}"
    ;;
  -c=* | --config-json-path=*)
    config_json_path="${arg#*=}"
    ;;
  -f | --fail-on-not-compliant)
    fail_on_not_compliant=1
    ;;
  esac
  shift
done

if [ -z "$dir" ] || [ -z "$config_json_path" ]; then
  show_usage
fi
    
if ! command -v jq source check_deps.sh>/dev/null; then
  die "The command jq is not installed"
fi

if ! command -v gsht source check_deps.sh>/dev/null; then
  die "The command gsht is not installed"
fi

if [ ! -f "$config_json_path" ]; then
  die "The configuration JSON file ${config_json_path} does not exist"
fi
    
version() {
  echo "0.1.0"
}
    
get_vars() {
  local vars
  local tf_files
  local code
  local tf_vars
  tf_files=$(find_tf_files "$dir")
  vars=""

  while read -r tf_file; do
    code=$(cat "$tf_file")
    tf_vars=$(echo "$code" | grep -oP "$1")
    vars+="
    ${tf_vars}"
  done < <(echo "$tf_files")

  echo "$vars"
}

eval_vars() {
  local vars_naming_convention_match_pattern_beginning
  local vars_naming_convention_match_pattern
  local vars_match_pattern_1
  local vars_match_pattern_2
  local vars
  local compliant_vars
  local compliant_vars_json_array
  local not_compliant_vars
  local not_compliant_vars_json_array
  vars_naming_convention_match_pattern=$(cat "$config_json_path" | jq -r .vars.naming_conventions.match_pattern)

  if [ "$vars_naming_convention_match_pattern" != "null" -a ! -z "$vars_naming_convention_match_pattern" ]; then
    vars_naming_convention_match_pattern_beginning="variable\s+"
    vars_match_pattern_1="^(?!#*$)([\s]+)?variable\s+[a-z0-9_]+"
    vars_match_pattern_2="variable\s+[a-z0-9_]+"
    vars_naming_convention_match_pattern="${vars_naming_convention_match_pattern_beginning}${vars_naming_convention_match_pattern}"
    vars=$(get_vars "$vars_match_pattern_1")
    compliant_vars=$(echo "$vars" | grep -oE "$vars_naming_convention_match_pattern")
    not_compliant_vars=$(echo "$vars" | grep -vE "$vars_naming_convention_match_pattern" | grep -oP "$vars_match_pattern_1" | grep -oE "$vars_match_pattern_2")
  else
    compliant_vars=""
    not_compliant_vars=""
  fi

  if [ -z "$compliant_vars" ]; then
    compliant_vars_json_array="[]"
  else
    compliant_vars_json_array=$(convert_array_to_json_array "$compliant_vars")
  fi

  if [ -z "$not_compliant_vars" ]; then
    not_compliant_vars_json_array="[]"
  else
    not_compliant_vars_json_array=$(convert_array_to_json_array "$not_compliant_vars")
  fi

  echo "{
    \"compliant\": ${compliant_vars_json_array},
    \"not_compliant\": ${not_compliant_vars_json_array}
  }"
}

    if [[ "$version" -eq 1 ]]; then
      die "$(version)"
    fi

    if [[ "$help" -eq 1 ]]; then
      die "$(version)"
    fi

    local compliant_vars
    local not_compliant_vars
    local vars_sum
    vars_sum=$(eval_vars)
    compliant_vars=$(echo "$vars_sum" | jq -r .compliant)
    not_compliant_vars=$(echo "$vars_sum" | jq -r .not_compliant)
    echo "compliant vars:"
    echo "$compliant_vars" | jq

    if [ "${not_compliant_vars}" != "[]" ]; then
      echo "not compliant vars:"
      echo "$not_compliant_vars" | jq
      die "There are vars that doesn't complaint" "$fail_on_not_compliant"
    fi
  )
}

tfsuit "$@"
